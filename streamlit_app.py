import streamlit as st
import hashlib

# Fonction pour hasher les mots de passe
def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

# Initialiser les utilisateurs si non existant
def initialize_users():
    if 'users' not in st.session_state:
        if 'persistent_users' not in st.session_state:
            st.session_state.persistent_users = {
                "admin@example.com": {
                    "password": hash_password("admin123"),
                    "is_logged_in": False
                }
            }
        st.session_state.users = st.session_state.persistent_users.copy()

# Initialiser les scores et les prix si non existants
def initialize_state():
    if 'scores' not in st.session_state:
        st.session_state.scores = {
            "Transport": 0,
            "H√©bergement": 0,
            "Restauration": 0,
            "Activit√©s": 0,
            "Autre": 0,
        }
    if 'prices' not in st.session_state:
        st.session_state.prices = {
            "Transport": 0,
            "H√©bergement": 0,
            "Restauration": 0,
            "Activit√©s": 0,
            "Autre": 0,
        }

# V√©rifier l'√©tat de connexion
def is_logged_in():
    for user, data in st.session_state.users.items():
        if data.get("is_logged_in", False):
            return user
    return None

# Interface d'inscription et de connexion combin√©es
def auth_page():
    st.markdown("# Connexion / Inscription")
    option = st.radio("Choisissez une option", ["Connexion", "Inscription"], key="auth_option")

    if option == "Connexion":
        email = st.text_input("Email", key="login_email")
        password = st.text_input("Mot de passe", type="password", key="login_password")
        if st.button("Se connecter", key="login_button"):
            user_data = st.session_state.users.get(email)
            if not user_data:
                st.error("Utilisateur non trouv√©. Veuillez vous inscrire.")
            elif user_data.get("password") != hash_password(password):
                st.error("Mot de passe incorrect.")
            else:
                user_data["is_logged_in"] = True
                st.success(f"Bienvenue {email} !")

    elif option == "Inscription":
        email = st.text_input("Email", key="signup_email")
        password = st.text_input("Mot de passe", type="password", key="signup_password")
        confirm_password = st.text_input("Confirmer le mot de passe", type="password", key="signup_confirm_password")
        if st.button("S'inscrire", key="signup_button"):
            if email in st.session_state.users:
                st.error("Cet email est d√©j√† utilis√©.")
            elif password != confirm_password:
                st.error("Les mots de passe ne correspondent pas.")
            elif len(password) < 6:
                st.error("Le mot de passe doit contenir au moins 6 caract√®res.")
            else:
                st.session_state.users[email] = {
                    "password": hash_password(password),
                    "is_logged_in": False
                }
                st.session_state.persistent_users[email] = {
                    "password": hash_password(password),
                    "is_logged_in": False
                }
                st.success("Inscription r√©ussie ! Vous pouvez maintenant vous connecter.")

    if is_logged_in():
        if st.button("Se d√©connecter", key="logout_button"):
            st.session_state.users[is_logged_in()]["is_logged_in"] = False
            st.success("Vous avez √©t√© d√©connect√©.")

# Initialiser les utilisateurs
initialize_users()
initialize_state()

# V√©rifier l'√©tat de connexion
logged_in_user = is_logged_in()

# Afficher l'email de l'utilisateur connect√©
if logged_in_user:
    st.sidebar.markdown(f"### Connect√© en tant que {logged_in_user}")

# Barre lat√©rale pour la navigation
st.sidebar.markdown("## Menu")
menu = ["Connexion / Inscription", "Accueil", "Questionnaire", "Informations", "Analyse"]
if "page" not in st.session_state:
    st.session_state.page = "Accueil"
selection = st.sidebar.radio("", menu, index=menu.index(st.session_state.page))

# Contenu des sections
if selection == "Accueil":
    st.markdown("# üí° TouriSieve")
    st.write("‚û°Ô∏è __L'objectif de cette application est de vous aider, en tant que tour-op√©rateur, √† adopter un tourisme plus durable.__")

    st.write("üåç Selon l‚ÄôOrganisation mondiale du tourisme (OMT), un __tourisme durable__ tient pleinement compte de ses impacts √©conomiques, sociaux et environnementaux, r√©pondant aux besoins actuels et futurs des visiteurs, des professionnels, de l'environnement, et des communaut√©s d'accueil.")
    
    st.write("üìÑ Pour avancer dans cette d√©marche, vous avez ici acc√®s √† un __questionnaire con√ßu sp√©cifiquement pour identifier des pistes d‚Äôam√©lioration dans vos activit√©s.__ Celui-ci s'appuie sur la cha√Æne de valeur du tourisme, d√©compos√©e en cinq grands piliers : Transport, H√©bergement, Restauration, Activit√©s, et Autres services. En abordant ces diff√©rents aspects, notre approche vous permet d‚Äô√©valuer l'impact de chaque maillon de votre cha√Æne sur les √©conomies locales et les communaut√©s.")
    
    st.write("üìä √Ä l'issue du questionnaire, __vous recevrez une estimation des retomb√©es √©conomiques de vos activit√©s sur les communaut√©s locales__. Une retomb√©e √©conomique d√©signe tout revenu g√©n√©r√© par le tourisme qui reste dans l'√©conomie locale plut√¥t que d‚Äô√™tre rapatri√© √† l‚Äô√©tranger. Ce principe garantit que les b√©n√©fices du tourisme sont redistribu√©s aupr√®s des communaut√©s locales, contribuant ainsi √† un d√©veloppement √©conomique inclusif et durable.")
    
    st.write("ü•≥ Gr√¢ce √† cette application, vous serez en mesure de renforcer les effets positifs de vos activit√©s sur l'√©conomie locale et d‚Äôadopter des pratiques toujours plus responsables et durables. Engageons-nous ensemble pour un tourisme qui profite √† tous et respecte l‚Äôavenir.")

elif selection == "Connexion / Inscription":
    auth_page()

elif selection == "Questionnaire":
    st.markdown("# üìù Questionnaire")

    if 'total_impact_values' not in st.session_state:
        st.session_state.total_impact_values = {
            "Transport": 0,
            "H√©bergement": 0,
            "Restauration": 0,
            "Activit√©s": 0,
            "Autre": 0
        }

    if 'prices' not in st.session_state:
        st.session_state.prices = {
            "Transport": 0,
            "H√©bergement": 0,
            "Restauration": 0,
            "Activit√©s": 0,
            "Autre": 0
        }


    with st.expander("Transport"):
        st.session_state.prices["Transport"] = st.number_input("Renseigner le prix (en ‚Ç¨) pour la section Transport :", min_value=0, key="price_transport")

        weights = {
            "q1": 0.10,
            "q2": 0.20,
            "q3": 0.15,
            "q4": 0.15,
            "q5": 0.15,
            "q6": 0.15,
            "q7": 0.10
        }

        impacts = {
            "q1": {"Oui": 0.75, "Non": 0.20, "Je ne sais pas": 0.0},
            "q2": {"Oui": 0.60, "Non": 0.30, "Je ne sais pas": 0.0},
            "q3": {"Oui": 1.00, "Non": 0.20, "Je ne sais pas": 0.0},
            "q4": {"Oui": 0.65, "Non": 0.35, "Je ne sais pas": 0.0},
            "q5": {"Oui": 0.10, "Non": 0.00, "Je ne sais pas": 0.0},
            "q6": {"Oui": 0.70, "Non": 0.30, "Je ne sais pas": 0.0},
            "q7": {"Oui": 0.60, "Non": 0.20, "Je ne sais pas": 0.0}
        }

        questions = {
            "q1": "Les v√©hicules utilis√©s pour le transport touristique (bus, trains, avions, navettes) sont-ils fabriqu√©s ou assembl√©s localement ?",
            "q2": "Les compagnies qui assurent les liaisons internes (bus, train, avion) sont-elles majoritairement locales ?",
            "q3": "Les chauffeurs et le personnel op√©rant les services de transport touristique sont-ils majoritairement locaux ?",
            "q4": "L'entretien et la maintenance des transports touristiques se font-ils localement ?",
            "q5": "Les entreprises de transport et leurs salari√©s paient-ils leurs imp√¥ts localement ?",
            "q6": "Les v√©hicules de transport touristique sont-ils principalement achet√©s et entretenus localement ?",
            "q7": "Existe-t-il des taxes locales sp√©cifiques sur les transports touristiques et des mesures de compensation des impacts environnementaux ?"
        }

        total_impact = 0
        for q, weight in weights.items():
            response = st.radio(questions[q], ["Oui", "Non", "Je ne sais pas"], index=2, key=f"transport_{q}")
            total_impact += impacts[q][response] * weight

        total_impact_percentage = total_impact * 100
        total_impact_value = st.session_state.prices["Transport"] * total_impact
        st.session_state.total_impact_values["Transport"] = total_impact_value
        
        st.write(f"### R√©sultat pour Transport")
        st.write(f"- **Retomb√©es √©conomiques locales :** {total_impact_percentage:.2f}%")
        st.write(f"- **Montant des retomb√©es √©conomiques :** {total_impact_value:.2f} ‚Ç¨")

    with st.expander("H√©bergement"):
        st.session_state.prices["H√©bergement"] = st.number_input("Renseigner le prix (en ‚Ç¨) pour la section H√©bergement :", min_value=0, key="price_hebergement")

        weights = {
            "q1": 0.30,
            "q2": 0.15,
            "q3": 0.15,
            "q4": 0.10,
            "q5": 0.20,
            "q6": 0.10
    }

        impacts = {
            "q1": {"Oui": 1.00, "Non": 0.50, "Je ne sais pas": 0.0},
            "q2": {"Oui": 1.00, "Non": 0.15, "Je ne sais pas": 0.0},
            "q3": {"Oui": 1.00, "Non": 0.15, "Je ne sais pas": 0.0},
            "q4": {"Oui": 0.25, "Non": 0.00, "Je ne sais pas": 0.0},
            "q5": {"Oui": 1.00, "Non": 0.20, "Je ne sais pas": 0.0},
            "q6": {"Oui": 0.25, "Non": 0.00, "Je ne sais pas": 0.0}
    }

        questions = {
            "q1": "Les h√©bergements touristiques (h√¥tels, maisons d‚Äôh√¥tes, campings, etc) sont-ils majoritairement poss√©d√©s et op√©r√©s par des acteurs locaux ?",
            "q2": "Les h√©bergements proposent-ils des produits alimentaires locaux dans le cas o√π des repas seraient inclus (ex : petit d√©jeuner) ?",
            "q3": "Les h√©bergements touristiques payent-ils des taxes locales importantes (ex: taxe de s√©jour) sans b√©n√©ficier d'exon√©rations ou de structures fiscales avantageuses ?",
            "q4": "Les meubles, d√©corations et linges utilis√©s dans les h√©bergements proviennent-ils majoritairement d‚Äôentreprises locales ?",
            "q5": "Les employ√©s des h√©bergements sont-ils majoritairement locaux ?",
            "q6": "Les h√©bergements touristiques utilisent-ils principalement des plateformes internationales comme Booking.com ou Expedia ?"
    }

        total_impact = 0
        for q, weight in weights.items():
            response = st.radio(questions[q], ["Oui", "Non", "Je ne sais pas"], index=2, key=f"hebergement_{q}")
            total_impact += impacts[q][response] * weight

        total_impact_percentage = total_impact * 100
        total_impact_value = st.session_state.prices["H√©bergement"] * total_impact
        st.session_state.total_impact_values["H√©bergement"] = total_impact_value

        st.write(f"### R√©sultat pour H√©bergement")
        st.write(f"- **Retomb√©es √©conomiques locales :** {total_impact_percentage:.2f}%")
        st.write(f"- **Montant des retomb√©es √©conomiques :** {total_impact_value:.2f} ‚Ç¨")

    with st.expander("Restauration"):
        st.session_state.prices["Restauration"] = st.number_input("Renseigner le prix (en ‚Ç¨) pour la section Restauration :", min_value=0, key="price_restauration")

        weights = {
            "q1": 0.30,
            "q2": 0.40,
            "q3": 0.20,
            "q4": 0.10
    }

        impacts = {
            "q1": {"Oui": 0.85, "Non": 0.30, "Je ne sais pas": 0.0},
            "q2": {"Oui": 1.00, "Non": 0.03, "Je ne sais pas": 0.0},
            "q3": {"Oui": 0.70, "Non": 0.30, "Je ne sais pas": 0.0},
            "q4": {"Oui": 0.90, "Non": 0.00, "Je ne sais pas": 0.0}
    }

        questions = {
            "q1": "Les restaurants sont-ils principalement d√©tenus et g√©r√©s par des acteurs locaux ?",
            "q2": "Les restaurants s‚Äôapprovisionnent-ils majoritairement en produits locaux (aliments, boissons et fournitures non alimentaires) ?",
            "q3": "Les employ√©s des restaurants sont-ils majoritairement locaux ?",
            "q4": "Les restaurants valorisent-ils activement la cuisine locale √† travers des plats typiques et des exp√©riences culinaires avec des guides locaux ?"
    }

        total_impact = 0
        for q, weight in weights.items():
            response = st.radio(questions[q], ["Oui", "Non", "Je ne sais pas"], index=2, key=f"restauration_{q}")
            total_impact += impacts[q][response] * weight

        total_impact_percentage = total_impact * 100
        total_impact_value = st.session_state.prices["Restauration"] * total_impact
        st.session_state.total_impact_values["Restauration"] = total_impact_value

        st.write(f"### R√©sultat pour Restauration")
        st.write(f"- **Retomb√©es √©conomiques locales :** {total_impact_percentage:.2f}%")
        st.write(f"- **Montant des retomb√©es √©conomiques :** {total_impact_value:.2f} ‚Ç¨")

    with st.expander("Activit√©s"):
        st.write("Section en cours de d√©veloppement.")

    with st.expander("Autre"):
        st.session_state.prices["Autre"] = st.number_input("Renseigner le prix (en ‚Ç¨) pour la section Autre :", min_value=0, key="price_autre")

        weights = {
            "q1": 0.25,
            "q2": 0.20,
            "q3": 0.15,
            "q4": 0.20,
            "q5": 0.10,
            "q6": 0.10
    }

        impacts = {
            "q1": {"Oui": 0.75, "Non": 0.35, "Je ne sais pas": 0.0},
            "q2": {"Oui": 0.65, "Non": 0.40, "Je ne sais pas": 0.0},
            "q3": {"Oui": 0.80, "Non": 0.25, "Je ne sais pas": 0.0},
            "q4": {"Oui": 0.65, "Non": 0.40, "Je ne sais pas": 0.0},
            "q5": {"Oui": 0.70, "Non": 0.25, "Je ne sais pas": 0.0},
            "q6": {"Oui": 0.55, "Non": 0.15, "Je ne sais pas": 0.0}
    }

        questions = {
            "q1": "Les boutiques de souvenirs vendent-elles principalement des produits fabriqu√©s localement ?",
            "q2": "Les magasins de souvenirs sont-ils principalement des franchises locales ?",
            "q3": "Les services de guide g√©n√©ral (ex. : visites de ville) sont-ils majoritairement fournis par des guides locaux ?",
            "q4": "Les spas et centres de bien-√™tre sont-ils principalement g√©r√©s par des locaux ?",
            "q5": "Les produits de bien-√™tre (huiles, cr√®mes) utilis√©s sont-ils principalement fabriqu√©s localement ?",
            "q6": "Les transactions touristiques (change, retraits) sont-elles majoritairement effectu√©es dans des banques locales ?"
    }

        total_impact = 0
        for q, weight in weights.items():
            response = st.radio(questions[q], ["Oui", "Non", "Je ne sais pas"], index=2, key=f"autre_{q}")
            total_impact += impacts[q][response] * weight

        total_impact_percentage = total_impact * 100
        total_impact_value = st.session_state.prices["Autre"] * total_impact
        st.session_state.total_impact_values["Autre"] = total_impact_value

        st.write(f"### R√©sultat pour Autre")
        st.write(f"- **Retomb√©es √©conomiques locales :** {total_impact_percentage:.2f}%")
        st.write(f"- **Montant des retomb√©es √©conomiques :** {total_impact_value:.2f} ‚Ç¨")

 # R√©sultats globaux
    total_sejour = sum(st.session_state.prices.values())
    total_retombes = sum(st.session_state.total_impact_values.values())
    total_retombes_percentage = (total_retombes / total_sejour * 100) if total_sejour != 0 else 0

    st.write("## R√©sultat global")
    st.write(f"**Montant total du s√©jour :** {total_sejour:.2f} ‚Ç¨")
    st.write(f"**Retomb√©es √©conomiques locales totales :** {total_retombes_percentage:.2f}%")
    st.write(f"**Montant des retomb√©es √©conomiques locales :** {total_retombes:.2f} ‚Ç¨")

elif selection == "Informations":
    st.markdown("# ‚ÑπÔ∏è Informations")
    st.write("Section informations en cours de d√©veloppement.")

elif selection == "Analyse":
    st.markdown("# üìä Analyse")
    st.write("Section analyse en cours de d√©veloppement.")
